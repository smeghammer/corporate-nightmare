#library "map15.acs"
#include "zcommon.acs"

/*
SCRIPT 1:
---------
*/

/* {3dsectorID, nailDist, sndthingID(?), hitCounter, hitCountLimit, lookupIndex} 
sndthingID is currently the player. This may change
*/
int nailHammer[5][6] = {
	{3,		156,	1,	0,	3,	0},	//432, EAST, Secret from 2ns LOWER? (288 down)
	{11,	96,		2,	0,	5,	1},	//480, WEST, ENTRY HERE
	{18,	416,	3,	0,	1,	2},	//384, SOUTH
	{21,	232,	4,	0,	1,	3},	//384, CENTRE
	{35,	24,		5,	0,	2,	4}	//entry nails
};
/* tags of sectors to drop as each hammer occurs, for each nail */
/* {dist, flat, tag1,tag2,...tagn...} 
 - tagn = sector to drop for current index (keyed by tracker, above)
 Each 'hit' will increment counter indexed by nailHammer[5] Due to limitations of ACS multidimensional arrays, I need to declare up front, but
 crucially, I cannot have nested arrays of different lengths. Therefore, I pad with  -1 if the nested array (indexed by nailHammer[5]) refers to the cuts caused by by hammer counts
 less than the maximum declared in one of the nailHammer[n][3] entries (currently 5).  The FIRST entry is distance to fall (*8) and the second entry is flat to change to */
int skinPeeler[5][7] = {
	{3,		"BLOOD1",	4,	5,	6,	-1,	-1},
	{3,		"BLOOD1",	30,	31,	32,	33,	34},
	{3,		"BLOOD1",	8,	-1,	-1,	-1,	-1},
	{-1,		"-",	-1,	-1,	-1,	-1,	-1},
	{-1,		"-",	-1,	-1,	-1,	-1,	-1}
};

/* control sectors initially of brightness 112. This script sets to max as the cut drips into the blood */
int cutBrightnessMapper[5][5] = {
	{100,101,102,-1,-1},
	{104,105,106,107,108},
	{103,-1,-1,-1,-1},
	{-1,-1,-1,-1,-1},
	{-1,-1,-1,-1,-1}
};

/* TIDs for spawn points of blood splashes. There will be more as the cut gets wider, so I
need to ensure the following:
 - first hammer, spawn at only first TID
 - second hit, spawn at first AND second
 - third hit, spawn at first, second and third
 - and so on...

*/
int bloodSplashMapper[5][5] = {
	{10,11,12,	-1,	-1},
	{18,17,16,15,14},
	{13,	-1,	-1,	-1,	-1},
	{35,	-1,	-1,	-1,	-1},
	{20,	20,	-1,	-1,	-1}
};
/* TIDs of things from which to play the nail sounds, rathe than the player. */
int nailSoundTIDMapper[5] = {1,2,3,4,5};

int underworldDoorLock[2] = {0,0};

/* track lowering of dest tele platform */
int finalTeleIsLowered = 0;

int blueNeeded = 1;
int yellowNeeded = 1;

/* to stop the BoH falling through the 3D floor */
script 100 ENTER{
	Floor_LowerInstant(2,0,64);
	Floor_LowerInstant(12,0,64);
	Floor_LowerInstant(23,0,64);
	Floor_LowerInstant(19,0,33);	//also, the cente of the sub-basement central nail underside
	
	Line_SetBlocking(1,32,0);
	
	/* periodically check inventory for blue and yellow skull keys */
	while(TRUE){
		Delay(35);
		if(CheckInventory("BlueSkull") && blueNeeded){
			blueNeeded = 0;
			floor_lowerinstant(51,0, 15);
		}
		if(CheckInventory("YellowSkull") && yellowNeeded){
			yellowNeeded = 0;
			floor_lowerinstant(52,0, 15);
		}
		
	}
}

/* nail ID, releaseRedEvilness come from linedef parameters */
script 1 (int nailId,int releaseRedEvilness){
	int unlocked = 1;
	if(nailId == 1)
	{
		//TODO: Change this bak as something fucked up...
		if (!(CheckInventory("BlueSkull") && CheckInventory("YellowSkull")))
		{
			print(s:"You need blue and yellow skull keys");
			unlocked = 0;
		}
		// do logic as per https://zdoom.org/wiki/ACS_LockedExecute
	}
	
	/* open monster closet to protect the red key! */
	if(releaseRedEvilness){
		floor_lowerinstant(53,0, 15);
	}
	
	/* check we have not reached the hit limit for nailId: */
	if(nailHammer[nailId][3] < nailHammer[nailId][4] && unlocked){
		
		/* drop the 3D floors defining the nail: */
		Floor_LowerByValue(nailHammer[nailId][0], 256, nailHammer[nailId][1]);
		Ceiling_LowerByValue(nailHammer[nailId][0],256,nailHammer[nailId][1]);
		/* play sound at appropriate head kebab */
		PlaySound(nailSoundTIDMapper[nailHammer[nailId][5]], "HIT_SLDG");

		/* because the hammer is now fast, the delay won't work. I therefore need to keep track of which hit I am on, rather than how long the pause should be.
		So I can use the counter (nailId][3]) to as an index for the sector to lower (skinPeeler: Floor_LowerInstant (tag, arg1, height), (height * 8)*/
		int lookupIndex= nailHammer[nailId][5];
		
		/* I therefore need to reference this entry for skinpeeler: */
		int currentLookupEntry = nailHammer[nailId][3];
		int currentCutBrightnessTag = cutBrightnessMapper[nailId][currentLookupEntry];
		
		int currentTagToDropIndex = currentLookupEntry + 2;		//this becomes the index for skinpeeler. As we have two entries before it, ADD TWO!!!!
		int currentTagToDrop = skinPeeler[lookupIndex][currentTagToDropIndex];
		
		int currentDistToDrop = skinPeeler[lookupIndex][0];
		str currentFloorFlat = skinPeeler[lookupIndex][1];
		
		Floor_LowerInstant(currentTagToDrop, 0, currentDistToDrop);
		ChangeFloor(currentTagToDrop,currentFloorFlat);
		Light_ChangeToValue(currentCutBrightnessTag,255);
		
		/* I need to iterate to generate all splashes. This routine needs to trigger more splashes as the cut widens... */
		int splashCounter = 0;
		for(int a=0;a<currentLookupEntry+1;a++){
			/* determine which TID(s) to activate. We count back to get all TIDs in the array */
			/* also need to push the thing down, as z-index is eset to starting floor level */
			SpawnSpotForced("BloodSplashBase",bloodSplashMapper[lookupIndex][currentLookupEntry-splashCounter],1,0);
			SpawnSpotForced("BloodSplash",bloodSplashMapper[lookupIndex][currentLookupEntry-splashCounter],1,0);
			splashCounter++;
		}
		
		/* increment hit counte for current nail */
		nailHammer[nailId][3] += 1;
	}
}

/*
toggle line blocking for pit fence above the tunnel
*/
script 2(int flag){
	if(flag){
		/* unblock */
		Line_SetBlocking(1,0,32);
	}
	else{
		Line_SetBlocking(1,32,0);
	}
}
/*
Open chaingun platform and raise light level
*/
script 3(void){
	print(s:"A weapon cache is opened...");
	Ceiling_RaiseByValue(38,12,24);
	Light_ChangeToValue(38,255);
}

/*  
open door to underworld...
*/
script 4 (int flag){
	underworldDoorLock[flag] = 1;
	if(underworldDoorLock[0] && underworldDoorLock[1]){
		generic_door(46,12,1,34,0);
	}
}

/*
track exit guard deaths:
*/
script 5(void){
	while(ThingCount(T_NONE,30)> 0){
		Delay(35);
	}
	floor_LowerByValue(48,8,56);
}

/* lower platform under last teleport */
script 6(void){
	if(!finalTeleIsLowered){
		floor_LowerInstant(74,0,91);
		finalTeleIsLowered = 1;
		ChangeFloor(74,"F_SKY1");
	}
}


/*
dop bars to last area:
*/
script 7(void){
	if (!(CheckInventory("BlueSkull") && CheckInventory("YellowSkull")))
	{
		print(s:"You need blue and yellow skull keys");
	}
	else{
		floor_LowerByValue(55,8,56);
	}
}

/* MAP16 from Hellbreach */

